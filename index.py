import requests
import streamlit as st
import pandas as pd
import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from io import BytesIO
import bcrypt
import json
import os
import hashlib
import base64
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from io import BytesIO
import calendar
import math
import numpy as np
import io
from decimal import Decimal
from pathlib import Path
from rapidfuzz import process, fuzz
from reportlab.platypus import Image
from supabase import create_client, Client
from PIL import Image  
import pytesseract
import easyocr
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
import os, pickle
# üì∑ Afficher un logo
st.set_page_config(
    page_title="Gestion de la Facturation",
    page_icon="logo2.png",  # chemin local ou URL
    layout="wide"
)
st.markdown("""
<style>
/* üñº Logo centr√© */
.logo-container {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 20px;
}

.logo {
    width: 200px;
    height: auto;
}

/* üåà Arri√®re-plan personnalis√© + forcer mode sombre */
html, body, .stApp {
    background: #1d2e4e !important;
    font-family: 'Segoe UI', sans-serif;
    color-scheme: dark !important; /* Emp√™che l'inversion automatique */
    color: white !important;
}

/* üñçÔ∏è Titre centr√© et color√© */
.main > div > div > div > div > h1 {
    text-align: center;
    color: #00796B !important;
}

/* üßº Nettoyage des bordures Streamlit */
.css-18e3th9 {
    padding: 1rem 0.5rem;
}

/* üé® Sidebar */
section[data-testid="stSidebar"] {
    background-color: #1f3763 !important;
    color: white !important;
}

section[data-testid="stSidebar"] .css-1v3fvcr {
    color: white !important;
}

/* üåà Titres dans la sidebar */
section[data-testid="stSidebar"] h1, 
section[data-testid="stSidebar"] h2, 
section[data-testid="stSidebar"] h3 {
    color: #e01b36 !important;
}

/* üé® Barre sup√©rieure */
header[data-testid="stHeader"] {
    background-color: #06dbae !important;
    color: white !important;
}

/* üß™ Supprimer la transparence */
header[data-testid="stHeader"]::before {
    content: "";
    background: none !important;
}

/* üì± Correction mobile : forcer couleurs partout */
h1, h2, h3, p, span, label {
    color: white !important;
}

/* üîµ Boutons bleu fonc√© forc√©s */
.stButton button {
    background-color: #2b2c36 !important; /* Bleu fonc√© */
    color: white !important;
    border: none !important;
    border-radius: 8px !important;
    padding: 0.5rem 1rem !important;
    font-weight: bold !important;
    -webkit-appearance: none !important; /* √âvite style par d√©faut mobile */
    appearance: none !important;
}

.stButton button:hover {
    background-color: #43444e !important; /* Bleu plus clair au survol */
    color: white !important;
}
</style>
""", unsafe_allow_html=True)



# üñºÔ∏è Ajouter un logo (remplacer "logo.png" par ton fichier ou une URL)
with open("logo.png", "rb") as image_file:
    encoded = base64.b64encode(image_file.read()).decode()

st.markdown(
    f"""
    <div class="logo-container">
        <img class="logo" src="data:image/png;base64,{encoded}">
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown(
    "<h1 style='text-align: center;'>Bienvenue sur l'application de calcul des factures</h1>",
    unsafe_allow_html=True
)
def nettoyer_colonne(df, col):
    series = (
        df[col]
        .astype(str)
        .str.replace(r"[^\d,.-]", "", regex=True)
        .str.replace(",", ".", regex=False)
        .replace("", "0")
    )

    # V√©rifie quelles valeurs ne sont pas convertibles
    erreurs = []
    for val in series.unique():
        try:
            float(val)
        except ValueError:
            erreurs.append(val)

    if erreurs:
        print(f"‚ö†Ô∏è Colonne '{col}' contient des valeurs non convertibles : {erreurs[:20]}")

    # Conversion s√©curis√©e
    return pd.to_numeric(series, errors="coerce").fillna(0.0)



from math import floor
def calcul_base(row):
    salaire = Decimal(str(row["Salaire de base calcule"]))
    prime = Decimal(str(row["Prime mensuelle (Bar√®me) (DZD)"]))
    panier = Decimal(str(row["Indemnit√© de panier (DZD)"]))
    transport  = Decimal(str(row["Indemnit√© de transport (DZD)"]))

    return floor((salaire + prime) - ((salaire + prime) * Decimal("0.09")) + (panier+transport))
def get_valeur(col_base, col_nouveau):
    if col_nouveau in df_client.columns:
        return nettoyer_colonne(df_client, col_nouveau).where(
            lambda x: x != 0, nettoyer_colonne(df_client, col_base)
        )
    else:
        return nettoyer_colonne(df_client, col_base)
import unicodedata
import re
import difflib

def normalize_text(s):
    """Normalise pour comparaison: enlever diacritiques, NBSP, espaces multiples, lower."""
    if s is None:
        return ""
    s = str(s)
    s = unicodedata.normalize("NFKD", s)
    s = "".join(c for c in s if unicodedata.category(c) != "Mn")
    s = s.replace("\u00A0", " ")
    s = re.sub(r"\s+", " ", s)
    return s.strip().lower()

def trouver_client_robuste(client_name, df, debug=False):
    """
    Filtrage tol√©rant pour retrouver les lignes d'un client dans df.
    Strat√©gies (en cascade):
      1) √©galit√© normalis√©e
      2) contenant (normalized contains)
      3) fuzzy close match (difflib) sur la liste d'√©tablissements uniques
    Retourne df_filtr√© (copie). Si debug=True, renvoie aussi info dict.
    """
    if df is None or df.empty:
        return (pd.DataFrame(), {"reason": "empty_df"}) if debug else pd.DataFrame()

    df2 = df.copy()
    df2["Etablissement_norm"] = df2["Etablissement"].astype(str).apply(normalize_text)
    client_norm = normalize_text(client_name)

    # 1) √©galit√© normalis√©e
    mask_eq = df2["Etablissement_norm"] == client_norm
    df_eq = df2[mask_eq].copy()
    if not df_eq.empty:
        if debug:
            return df_eq, {"method": "exact_norm", "count": len(df_eq)}
        return df_eq

    # 2) contains normalis√© (client substring of Etab_norm or vice-versa)
    mask_contains = df2["Etablissement_norm"].str.contains(re.escape(client_norm), na=False)
    df_contains = df2[mask_contains].copy()
    if not df_contains.empty:
        if debug:
            return df_contains, {"method": "contains_etab", "count": len(df_contains)}
        return df_contains

    # also try client contained in etab or etab contained in client (reverse)
    mask_rev = df2["Etablissement_norm"].apply(lambda x: client_norm in x or x in client_norm)
    df_rev = df2[mask_rev].copy()
    if not df_rev.empty:
        if debug:
            return df_rev, {"method": "contains_rev", "count": len(df_rev)}
        return df_rev

    # 3) fuzzy matching on unique values
    uniques = sorted(df2["Etablissement_norm"].dropna().unique().tolist())
    close = difflib.get_close_matches(client_norm, uniques, n=3, cutoff=0.7)
    if close:
        # prendre le premier best match
        best = close[0]
        df_close = df2[df2["Etablissement_norm"] == best].copy()
        if debug:
            return df_close, {"method": "fuzzy", "match": best, "close_candidates": close, "count": len(df_close)}
        return df_close

    # Aucun r√©sultat
    if debug:
        # retourner un petit aper√ßu des candidats potentiels pour aider
        sample_uniques = uniques[:30]
        return pd.DataFrame(), {"method": "no_match", "sample_candidates": sample_uniques}

    return pd.DataFrame()

def fetch_all_data(table_name, batch_size=1000):
    all_data = []
    last_id = 0
    
    while True:
        response = (
            supabase.table(table_name)
            .select("*")
            .order("id")
            .gte("id", last_id + 1)
            .limit(batch_size)
            .execute()
        )
        
        if not response.data:
            break
        
        all_data.extend(response.data)
        
        # mettre √† jour le dernier id r√©cup√©r√©
        last_id = max(item["id"] for item in response.data)
        
        if len(response.data) < batch_size:
            break
    
    return pd.DataFrame(all_data)

from reportlab.platypus import Image, Table, TableStyle, Spacer, Paragraph
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors


def calcul_joursstc_ouvres(row):
    val = row["Date du dernier jour travaill√©"]
    nbr_jours_stc = row["Nbr jours STC (jours)"]
    
    date_debut = pd.to_datetime(val, dayfirst=True, errors="coerce")
    if pd.isna(date_debut) or nbr_jours_stc == 0:
        return 0

    start = (date_debut + pd.Timedelta(days=1)).normalize()
    end = start + pd.Timedelta(days=nbr_jours_stc - 1)

    # G√©n√©rer toutes les dates de la p√©riode
    toutes_les_dates = pd.date_range(start=start, end=end, freq="D")
    
    # Filtrer les jours ouvr√©s (exclure vendredi=4 et samedi=5)
    jours_ouvres = sum(1 for date in toutes_les_dates if date.weekday() not in [4, 5])
    
    return jours_ouvres

import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
import os
from openpyxl.drawing.image import Image as XLImage
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils import get_column_letter
SCOPES = ['https://www.googleapis.com/auth/drive.file']

def authenticate_drive():
    """
    Authentifie avec un compte de service (via secrets Streamlit) et retourne un service Google Drive.
    """
    creds = service_account.Credentials.from_service_account_info(
        st.secrets["gcp_service_account"],  # üëà lit depuis secrets.toml
        scopes=SCOPES
    )
    return build("drive", "v3", credentials=creds)


def get_or_create_folder(service, folder_name, parent_id=None):
    """
    V√©rifie si un dossier existe dans Google Drive, sinon le cr√©e.
    Retourne l'ID du dossier.
    """
    # Requ√™te pour chercher le dossier
    query = f"mimeType='application/vnd.google-apps.folder' and name='{folder_name}' and trashed = false"
    if parent_id:
        query += f" and '{parent_id}' in parents"

    results = service.files().list(q=query, fields="files(id, name)").execute()
    items = results.get("files", [])

    if items:
        return items[0]["id"]  # ‚úÖ Dossier trouv√©

    # Sinon, cr√©ation du dossier
    metadata = {
        "name": folder_name,
        "mimeType": "application/vnd.google-apps.folder"
    }
    if parent_id:
        metadata["parents"] = [parent_id]

    folder = service.files().create(body=metadata, fields="id").execute()
    return folder["id"]


def upload_to_drive(file_path, client_name, root_folder_id=None):
    """
    Upload un fichier Excel dans le dossier du client sur Google Drive.
    - Cr√©e le dossier du client si n√©cessaire
    - Supprime le fichier existant avant de recharger le nouveau
    Retourne l'ID du fichier upload√©.
    """
    service = authenticate_drive()

    # 1Ô∏è‚É£ V√©rifier/cr√©er le dossier client
    folder_id = get_or_create_folder(service, client_name, parent_id=root_folder_id)

    # Nom du fichier (nom local)
    file_name = os.path.basename(file_path)

    # 2Ô∏è‚É£ V√©rifier si un fichier avec le m√™me nom existe d√©j√†
    query = f"name='{file_name}' and '{folder_id}' in parents and trashed=false"
    results = service.files().list(q=query, fields="files(id, name)").execute()
    existing_files = results.get("files", [])

    # 3Ô∏è‚É£ Supprimer les doublons avant upload
    if existing_files:
        for f in existing_files:
            print(f"üóë Suppression du fichier existant : {f['name']} ({f['id']})")
            service.files().delete(fileId=f["id"]).execute()

    # 4Ô∏è‚É£ Upload du fichier
    file_metadata = {"name": file_name, "parents": [folder_id]}
    media = MediaFileUpload(
        file_path,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    file = service.files().create(body=file_metadata, media_body=media, fields="id").execute()

    print(f"‚úÖ Nouveau fichier upload√© dans {client_name} : {file_name} ({file['id']})")
    return file["id"]


def generer_facture_excel(employe_dict, nom_fichier, logos_folder="facturation_app/Logos"):
    # üìå Cr√©er un nouveau classeur Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "Facturation"
    
    # üìå Styles
    header_font = Font(bold=True, size=14, color="000000")
    normal_font_black = Font(size=11, color="000000")
    normal_font_white = Font(size=11, color="FFFFFF")
    header_fill = PatternFill(start_color="DDEBF7", end_color="DDEBF7", fill_type="solid")
    data_fill = PatternFill(start_color="F2F2F2", end_color="F2F2F2", fill_type="solid")
    border = Border(left=Side(style='thin'), right=Side(style='thin'),
                    top=Side(style='thin'), bottom=Side(style='thin'))
    center_alignment = Alignment(horizontal='center', vertical='center')
    left_alignment = Alignment(horizontal='left', vertical='center')
    COL_OFFSET = 4
    
    # üìå Mapping couleurs
    color_map = {
        "Base cotisable": "9fc5e8", "Retenue CNAS employ√©": "9fc5e8",
        "Base imposable au bar√©me": "9fc5e8", "IRG bar√®me": "9fc5e8",
        "Base imposable 10%": "9fc5e8", "IRG 10%": "9fc5e8",
        "Salaire brut": "9fc5e8", "CNAS employeur": "9fc5e8",
        "Cotisation ≈ìuvre sociale": "9fc5e8", "Taxe formation": "9fc5e8",
        "Taxe formation et os": "9fc5e8", "Frais t√©l√©phone": "9fc5e8",
        "Frais de transport (Yassir)": "9fc5e8", "Frais divers": "9fc5e8",
        "Co√ªt cong√© pay√©": "9fc5e8", "Taux compl√©ment sant√© (DZD)": "9fc5e8",
        "Fees etalent": "9fc5e8", "TAP": "9fc5e8",
        "Salaire net": "25488e", "Masse salariale": "25488e", "Co√ªt salaire": "25488e",
        "Facture HT": "e11b36",
        "NDF": "284052", "Facture TVA": "284052", "Facture TTC": "284052",
    }
    white_text_lines = {"Salaire net", "Masse salariale", "Co√ªt salaire",
                        "Facture HT", "NDF", "Facture TVA", "Facture TTC"}
    
    # üìå Logo client
    etablissement = str(employe_dict.get("Etablissement", "")).strip()
    logo_path = os.path.join(logos_folder, f"{etablissement}.png")
    if os.path.exists(logo_path):
        try:
            logo = XLImage(logo_path)
            logo.width = 400
            logo.height = 130
            ws.add_image(logo, f"{get_column_letter(COL_OFFSET+4)}1")
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible d‚Äôins√©rer le logo pour {etablissement}: {e}")
    else:
        print(f"‚ö†Ô∏è Logo introuvable pour {etablissement} ({logo_path})")

    # üìå Infos employ√©
    infos_employe = [
        ["Nom:", employe_dict.get("Nom", "")],
        ["Pr√©nom:", employe_dict.get("Pr√©nom", "")],
        ["Ann√©e:", employe_dict.get("Ann√©e", "")],
        ["Titre du poste:", employe_dict.get("Titre du poste", "")],
        ["Dur√©e CDD:", employe_dict.get("Dur√©e du CDD (Mois)", "")],
        ["√âtablissement:", etablissement]
    ]
    for i, (label, value) in enumerate(infos_employe, start=3):
        ws.cell(row=i, column=COL_OFFSET, value=label).font = Font(bold=True)
        ws.cell(row=i, column=COL_OFFSET+1, value=value).font = normal_font_black
    
    # üìå Cat√©gorisation clients
    clients_simples = ["Abbott", "Samsung"]
    client_sante = ["Siemens", "Healthineers","Siemens Energy", "Siemens Healthineers Oncology",
                    "Tango","Roche","CCIS ex SOGEREC","JTI","Philip Morris International",
                    "Wilhelmsen", "IPSEN", "LG"]
    client_os = ["Maersk", "Henkel"]
    client_change = ["Epson"]
    client_change_phone = ["Cahors"]
    client_ndf = ["Syngenta"]
    client_gd = ["G+D"]

    # üìå R√©cup√©ration des mois
    mois_data = {}
    for key, value in employe_dict.items():
        if '_' in key:
            ligne_nom, mois_nom = key.rsplit('_', 1)
            mois_data.setdefault(mois_nom, {})[ligne_nom] = value

    def is_useful_value(v):
        """Retourne True si la valeur est utile (non NaN, non vide)."""
        if v is None:
            return False
        # float NaN
        try:
            if isinstance(v, float) and math.isnan(v):
                return False
        except Exception:
            pass
        # NaN-like
        try:
            if v != v:
                return False
        except Exception:
            pass
        # cha√Ænes "vides"
        if isinstance(v, str):
            s = v.strip().lower()
            if s == "" or s in ("nan", "none", "na", "<na>", "null"):
                return False
            return True
        return True

    # ‚úÖ garder uniquement les mois qui ont AU MOINS une valeur utile
    mois_disponibles = [m for m, lignes in mois_data.items() if any(is_useful_value(v) for v in lignes.values())]

    # üìå Fonction pour g√©n√©rer un tableau
    def generer_tableau(start_row, titre, lignes):
        # Titre tableau
        ws.merge_cells(start_row=start_row, start_column=COL_OFFSET, 
                       end_row=start_row, end_column=COL_OFFSET+len(mois_disponibles))
        titre_cell = ws.cell(row=start_row, column=COL_OFFSET, value=titre)
        titre_cell.font = Font(bold=True, size=13, color="000000")
        titre_cell.alignment = center_alignment
        start_row += 1

        # En-t√™te
        ws.cell(row=start_row, column=COL_OFFSET, value="√âl√©ments").font = header_font
        ws.cell(row=start_row, column=COL_OFFSET).fill = header_fill
        ws.cell(row=start_row, column=COL_OFFSET).alignment = center_alignment
        ws.cell(row=start_row, column=COL_OFFSET).border = border

        for col, mois in enumerate(mois_disponibles, start=1):
            cell = ws.cell(row=start_row, column=COL_OFFSET+col, value=mois)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = center_alignment
            cell.border = border

        # Lignes
        for row, ligne in enumerate(lignes, start=1):
            current_row = start_row + row
            fill_color = color_map.get(ligne)
            fill_style = PatternFill(start_color=fill_color, end_color=fill_color, fill_type="solid") if fill_color else None
            font_color = "FFFFFF" if ligne in white_text_lines else "000000"

            cell_titre = ws.cell(row=current_row, column=COL_OFFSET, value=ligne)
            cell_titre.font = Font(bold=True, color=font_color)
            cell_titre.alignment = left_alignment
            cell_titre.border = border
            if fill_style: cell_titre.fill = fill_style

            for col, mois in enumerate(mois_disponibles, start=1):
                val = mois_data.get(mois, {}).get(ligne, " ")
                if isinstance(val, (int, float)):
                    val = f"{val:,.2f}".replace(",", " ").replace(".", ",")
                cell = ws.cell(row=current_row, column=COL_OFFSET+col, value=val)
                cell.font = Font(size=11, color=font_color)
                cell.alignment = center_alignment
                cell.border = border
                if fill_style: cell.fill = fill_style
                elif row % 2 == 0: cell.fill = data_fill

        return current_row + 2  # ligne suivante

    # üìå Cas sp√©cial G+D ‚Üí 3 tableaux
    if etablissement in client_gd:
        start_row = 10
        start_row = generer_tableau(start_row, "R√©capitulatif salarial",
            ["Salaire de base", "Prime mensuelle", "Prime exeptionnelle (10%) (DZD)",
             "Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", 
             "Salaire net", "Facture HT","Facture TVA", "Facture TTC"])
        start_row = generer_tableau(start_row, "Travel Expenses",
            ["Travel expenses M segment", "Travel expenses C segment"])
        start_row = generer_tableau(start_row, "Allowance",
            ["Allowance M segment", "Allowance C segment"])

    # üìå Tous les autres clients
    else:
        if etablissement in clients_simples:
            lignes = ["Salaire de base", "Prime mensuelle", "Prime exeptionnelle (10%) (DZD)",
                      "Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", "Frais remboursement",
                      "Base cotisable", "Retenue CNAS employ√©", "Base imposable au bar√©me", "IRG bar√®me",
                      "Base imposable 10%", "IRG 10%", "Salaire net", "Salaire brut", "CNAS employeur",
                      "Cotisation ≈ìuvre sociale", "Taxe formation", "Masse salariale", 
                      "Co√ªt cong√© pay√©","Co√ªt salaire","Fees etalent", "Facture HT","Facture TVA", "Facture TTC"]
        elif etablissement in client_sante:
            lignes = ["Salaire de base", "Prime mensuelle", "Prime exeptionnelle (10%) (DZD)",
                      "Prime vestimentaire (DZD)", "Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", 
                      "Frais remboursement","Base cotisable", "Retenue CNAS employ√©", "Base imposable au bar√©me",
                      "IRG bar√®me","Base imposable 10%", "IRG 10%","Salaire net","Salaire brut", "CNAS employeur",
                      "Cotisation ≈ìuvre sociale", "Taxe formation", "Masse salariale", 
                      "Co√ªt cong√© pay√©","Taux compl√©ment sant√© (DZD)","Co√ªt salaire","Fees etalent", 
                      "Facture HT","Facture TVA", "Facture TTC"]
        elif etablissement in client_os:
            lignes = ["Salaire de base", "Prime mensuelle", "Prime exeptionnelle (10%) (DZD)",
                      "Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", "Frais remboursement",
                      "Base cotisable", "Retenue CNAS employ√©", "Base imposable au bar√©me", "IRG bar√®me",
                      "Base imposable 10%", "IRG 10%","Salaire net","Salaire brut", "CNAS employeur",
                      "Taxe formation et os","Co√ªt cong√© pay√©","Taux compl√©ment sant√© (DZD)","Co√ªt salaire",
                      "Fees etalent","TAP", "Facture HT","Facture TVA", "Facture TTC"]
        elif etablissement in client_change:
            lignes = ["Salaire de base", "Prime mensuelle", "Prime exeptionnelle (10%) (DZD)",
                      "Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", "Frais remboursement",
                      "Base cotisable", "Retenue CNAS employ√©", "Base imposable au bar√©me","IRG bar√®me",
                      "Base imposable 10%", "IRG 10%","Salaire net","Salaire brut", "CNAS employeur",
                      "Cotisation ≈ìuvre sociale", "Taxe formation", "Masse salariale", 
                      "Co√ªt cong√© pay√©","Frais t√©l√©phone","Frais de transport (Yassir)","Frais divers",
                      "Co√ªt salaire","Fees etalent", "Facture HT","Facture HT en devise","Facture TVA", "Facture TTC"]
        elif etablissement in client_change_phone:
            lignes = ["Salaire de base", "Prime mensuelle", "Prime exeptionnelle (10%) (DZD)",
                      "Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", "Frais remboursement",
                      "Base cotisable", "Retenue CNAS employ√©", "Base imposable au bar√©me","IRG bar√®me",
                      "Base imposable 10%", "IRG 10%","Salaire net","Salaire brut", "CNAS employeur",
                      "Cotisation ≈ìuvre sociale", "Taxe formation", "Masse salariale", 
                      "Co√ªt cong√© pay√©","Frais de transport (Yassir)","Frais divers",
                      "Co√ªt salaire","Fees etalent", "Facture HT","Facture HT en devise","Facture TVA", "Facture TTC"]
        elif etablissement in client_ndf:
            lignes = ["Salaire de base", "Prime mensuelle", "Prime exeptionnelle (10%) (DZD)",
                      "Prime vestimentaire (DZD)","Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", 
                      "Frais remboursement","Base cotisable", "Retenue CNAS employ√©", "Base imposable au bar√©me",
                      "IRG bar√®me","Base imposable 10%", "IRG 10%","Salaire net","Salaire brut", "CNAS employeur",
                      "Cotisation ≈ìuvre sociale", "Taxe formation", "Masse salariale", 
                      "Co√ªt cong√© pay√©","Co√ªt salaire","Fees etalent", "Facture HT","NDF","Facture TVA", "Facture TTC"]
        else:
            lignes = ["Salaire de base","IFSP (20% du salaire de base)", "Prime mensuelle",  
                      "Prime exeptionnelle (10%) (DZD)", "Indemnit√© de panier","ind√©mnit√© V√©hicule",  
                      "Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport", "Frais remboursement",
                      "Base cotisable", "Retenue CNAS employ√©", "Base imposable au bar√©me","IRG bar√®me",
                      "Base imposable 10%", "IRG 10%","Salaire net","Salaire brut", "CNAS employeur",
                      "Cotisation ≈ìuvre sociale", "Taxe formation","Taxe formation et os", "Masse salariale", 
                      "Co√ªt cong√© pay√©","Taux compl√©ment sant√© (DZD)","Co√ªt salaire","Fees etalent", 
                      "Facture HT", "Facture TTC"]

        generer_tableau(10, "R√©capitulatif salarial", lignes)

    # üìå Largeur colonnes
    for col in range(COL_OFFSET, COL_OFFSET + len(mois_disponibles) + 2):
        ws.column_dimensions[get_column_letter(col)].width = 40
    ws.freeze_panes = "E1"

    # üìå Sauvegarde
    if not nom_fichier.endswith('.xlsx'):
        nom_fichier += '.xlsx'
    wb.save(nom_fichier)
    # drive_file_id = upload_to_drive(nom_fichier, client_name=etablissement, root_folder_id="1vhxSZ3jtWEqLocQ7yx9AcsSCiVowbFve")


    return nom_fichier
def calcul_cout_conge(row):
    # Cas 1 : augmentation ou nouveau salaire
    if row["Augmentation state"] == "Yes" or row["Nouveau Salaire de base (DZD)"] != 0:
        
        Masse_salariale = (
                    row["Salaire brut"] +
                    row["CNAS employeur"] +
                    row["Cotisation ≈ìuvre sociale"] +
                    row["Taxe formation"]
                )
        cout_conge = (Masse_salariale / 30 * 2.5)
    else:
        # Cas 2 : pas d‚Äôaugmentation ‚Üí on garde le co√ªt cong√© pay√© existant
        cout_conge = row["Co√ªt cong√© pay√©"]

    # Ajout r√©gul si "Cong√© pay√©"
    cout_conge += row["R√©gul"] if row["Base de r√©gul"] == "Cong√© pay√©" else 0
    return cout_conge
USERS_FILE = "users.json"
SUPABASE_URL = st.secrets["SUPABASE_URL"]
SUPABASE_KEY = st.secrets["SUPABASE_KEY"]
# üîí Hachage du mot de passe
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# üìù Inscription
def signup(email, password):
    response = supabase.auth.sign_up({"email": email, "password": password})
    return response

# üîê Connexion
def login(email, password):
    response = supabase.auth.sign_in_with_password({"email": email, "password": password})
    return response

# üö™ D√©connexion
def logout():
    supabase.auth.sign_out()
    st.session_state["authenticated"] = False
    st.session_state["user"] = None

# --- Interface ---
# st.title("üîê Auth avec Supabase")

if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False

if not st.session_state["authenticated"]:
    mode = st.radio("Choisissez :", ["Connexion", "Cr√©er un compte"])

    email = st.text_input("Email")
    password = st.text_input("Mot de passe", type="password")

    if mode == "Cr√©er un compte":
        if st.button("Cr√©er un compte"):
            res = signup(email, password)
            if res.user:
                st.success("‚úÖ Compte cr√©√© ! V√©rifie ton email.")
            else:
                st.error(f"Erreur : {res}")
    else:
        if st.button("Connexion"):
            res = login(email, password)
            if res.user:
                st.session_state["authenticated"] = True
                st.session_state["user"] = res.user
                st.rerun()
            else:
                st.error("‚ùå Email ou mot de passe incorrect.")

else:
    with st.sidebar:
        st.success(f"Bienvenue {st.session_state['user'].email} üëã")
        if st.button("Se d√©connecter"):
            logout()
            st.rerun()

# üéâ Application principale ici
# st.title("Bienvenue sur l'application de calcule des factures")



    # üìå Initialisation
    if "clients" not in st.session_state:
        st.session_state.clients = []
    if "selected_client" not in st.session_state:
        st.session_state.selected_client = None
    if "full_df" not in st.session_state:
        st.session_state.full_df = None
    if "data" not in st.session_state:
        st.session_state.data = {}


    CLIENTS_FILE = Path("clients.json")
    # st.title("üë• Gestion des clients et des employ√©s")

    # üìÇ Charger la liste des clients
    if CLIENTS_FILE.exists():
        with open(CLIENTS_FILE, "r", encoding="utf-8") as f:
            clients_list = json.load(f)
    else:
        clients_list = [
        "Abbott", "Samsung", "Henkel", "G+D", "Maersk",
            "Cahors", "Philip Morris International", "Siemens", "Syngenta", "LG",
            "Epson", "EsteL", "JTI", "Siemens Energy", "Wilhelmsen",
            "Healthineers", "Contrat auto-entrepreneur", "Coca Cola", "IPSEN", "SOGEREC","CCIS ex SOGEREC",
            "Roche", "Tango", "VARION"
        ]
        with open(CLIENTS_FILE, "w", encoding="utf-8") as f:
            json.dump(clients_list, f, ensure_ascii=False, indent=2)
    client_name = st.sidebar.selectbox(
        "S√©lectionner un client",
        options=clients_list,
        index=None,  # <-- pas de s√©lection initiale
        placeholder="‚Äî S√©lectionner un client ‚Äî",
        key="client_select",
    )
    st.session_state.clients = clients_list
    st.session_state.selected_client = client_name
    # üìÅ Upload du fichier global
    # GLOBAL_CSV = "data_global.csv"
    st.sidebar.subheader("üìÖ Charger le fichier R√©cap")
    uploaded_csv = st.sidebar.file_uploader("Fichier CSV R√©cap", type=["csv"], key="csv_recap")
    
    MOIS_MAP = {
    "-janv.-": "Janvier",
    "-f√©vr.-": "F√©vrier",
    "-mars-": "Mars",
    "-avr.-": "Avril",
    "-mai-": "Mai",
    "-juin-": "Juin",
    "-juil.-": "Juillet",
    "-ao√ªt-": "Ao√ªt",
    "-sept.-": "Septembre",
    "-oct.-": "Octobre",
    "-nov.-": "Novembre",
    "-d√©c.-": "D√©cembre",
    }

    if uploaded_csv is not None:
        try:
            raw = uploaded_csv.getvalue()

            # Corriger les espaces ins√©cables (U+202F)
            raw = raw.replace(b"\xe2\x80\xaf", b" ")

            # Charger CSV
            df_full = pd.read_csv(
                io.BytesIO(raw),
                skiprows=2,
                sep=",",
                decimal=",",
                thousands=" "
            )
            # df_full.rename(columns=lambda col: MOIS_MAP.get(col, col), inplace=True)
            # Nettoyer colonnes texte (uniquement object/string)
            # Colonnes √† NE PAS nettoyer (texte pur)
            cols_a_nettoyer = ["Travel expenses M segment", "Travel expenses C segment", "Allowance M segment", "Allowance C segment"]

            # Colonnes candidates au nettoyage
            # cols_a_nettoyer = [c for c in df_full.columns if c not in cols_texte]

            for col in cols_a_nettoyer:
                if df_full[col].dtype == "object":  # seulement object
                    df_full[col] = (
                        df_full[col]
                        .astype(str)
                        .str.replace("\u202f", "", regex=False)  # supprime espaces ins√©cables
                        .str.replace(" ", "", regex=False)       # supprime espaces normaux
                        .str.replace(",", ".", regex=False)      # remplace virgule par point
                        .str.replace(r"[^\d\.-]", "", regex=True)  # garde chiffres, . et -
                        .replace("", "0")
                        .astype(float)
                    )
                    df_full[col] = pd.to_numeric(df_full[col], errors="coerce")


            # # Convertir en float si possible
            # for col in df_full.columns:
            #     df_full[col] = pd.to_numeric(df_full[col], errors="coerce")
            st.write(df_full.head())
            st.session_state.full_df = df_full
            st.sidebar.success("‚úÖ Fichier charg√© avec succ√®s !")

            # üöë Nettoyer les NaN et inf (pour JSON)
            df_full = df_full.replace([np.nan, np.inf, -np.inf], None)

            # V√©rifier et normaliser la colonne Mois
            if "Mois" in df_full.columns:
                df_full["Mois"] = df_full["Mois"].map(MOIS_MAP).fillna(df_full["Mois"])
                mois = df_full["Mois"].iloc[0]
            else:
                st.error("‚ùå La colonne 'Mois' est manquante dans le CSV")
                mois = "Inconnu"

            # Supprimer les anciennes lignes du m√™me mois
            
            supabase.table("Recap").delete().eq("Mois", mois).execute()

            # üîé R√©cup√©rer le max(id) existant
            res = supabase.table("Recap").select("id").order("id", desc=True).limit(1).execute()
            start_id = res.data[0]["id"] + 1 if res.data else 1

            # Assigner des id uniques
            df_full.insert(0, "id", range(start_id, start_id + len(df_full)))

            # Ins√©rer les nouvelles lignes par batch
            records = df_full.to_dict(orient="records")
            CHUNK = 1000
            for i in range(0, len(records), CHUNK):
                batch = records[i:i+CHUNK]
                if batch:
                    supabase.table("Recap").insert(batch).execute()

            st.success(f"‚úÖ Donn√©es mises √† jour pour **{mois}** dans Supabase (table Recap)")
            # st.dataframe(df_full)

        except Exception as e:
            st.sidebar.error(f"‚ùå Erreur : {e}")

    
    # ‚ûï Ajouter un nouveau client
    
    st.sidebar.subheader("‚ûï Ajouter un nouveau client")
    new_client = st.sidebar.text_input("Nom du nouveau client")
    if st.sidebar.button("Ajouter"):
        if new_client and new_client not in st.session_state.clients:
            st.session_state.clients.append(new_client)
            with open(CLIENTS_FILE, "w", encoding="utf-8") as f:
                json.dump(st.session_state.clients, f, ensure_ascii=False, indent=2)
            st.sidebar.success(f"Client '{new_client}' ajout√© !")

    # üóëÔ∏è Supprimer un client avec confirmation
    st.sidebar.subheader("üóëÔ∏è Supprimer un client")
    client_to_delete = st.sidebar.selectbox("Choisir le client √† supprimer", [""] + st.session_state.clients)

    # Variable temporaire pour confirmation
    if "confirm_delete" not in st.session_state:
        st.session_state.confirm_delete = None

    if st.sidebar.button("Supprimer"):
        if client_to_delete and client_to_delete in st.session_state.clients:
            st.session_state.confirm_delete = client_to_delete  # on garde le nom en m√©moire

    # Si un client est en attente de confirmation
    if st.session_state.confirm_delete:
        st.warning(f"‚ö†Ô∏è √ätes-vous s√ªr de vouloir supprimer le client '{st.session_state.confirm_delete}' ?")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ Oui, supprimer"):
                st.session_state.clients.remove(st.session_state.confirm_delete)
                with open(CLIENTS_FILE, "w", encoding="utf-8") as f:
                    json.dump(st.session_state.clients, f, ensure_ascii=False, indent=2)
                st.success(f"Client '{st.session_state.confirm_delete}' supprim√© avec succ√®s !")
                st.session_state.confirm_delete = None  # reset
        with col2:
            if st.button("‚ùå Annuler"):
                st.info("Suppression annul√©e.")
                st.session_state.confirm_delete = None


    if st.session_state.selected_client:
        st.markdown(f"## üë§ Donn√©es des employ√©s pour **{st.session_state.selected_client.strip()}**")

        if st.session_state.full_df is not None:
            # df = st.session_state.full_df.copy()
            

            df = fetch_all_data("Recap")
            # st.write("Nb lignes r√©cup√©r√©es :", len(df))
            # st.write("Mois distincts :", sorted(df["Mois"].unique()))

            # ‚úÖ Filtrer par client
            df_client, info = trouver_client_robuste(st.session_state.selected_client, df, debug=True)
            # st.write("üîç Debug trouver_client_robuste:", info)
            # st.write("‚úÖ Nombre de lignes trouv√©es pour le client:", len(df_client))

        # ‚ö†Ô∏è Ne pas √©craser totalement, stocker tel quel


            if not df_client.empty:
                # ------------------------------------------------
                # Partie calculs et pr√©paration des donn√©es
                # ------------------------------------------------
                mois_possibles = [mois.lower() for mois in calendar.month_name if mois]
                colonnes_mois = [col for col in df_client.columns if any(mois in col.lower() for mois in mois_possibles)]
                nb_employes = df_client["N¬∞"].nunique()
                st.success(f"{nb_employes} employ√©s trouv√©s.")
                source = st.sidebar.radio("üìå Source des taux :", ["Capture d'√©cran", "OANDA"])
                if "df_rates" not in st.session_state:
                    st.session_state.df_rates = pd.DataFrame(columns=["Devise", "Achat", "Vente"])
                    devise_active = st.sidebar.radio("Choisir la devise :", ["EUR", "USD"], horizontal=True)
                    st.session_state.devise_active = devise_active
                if source == "Capture d'√©cran":
                    from PIL import Image  
                    MAX_WIDTH = 800
                    uploaded_image = st.sidebar.file_uploader("üì∑ Charger la capture", type=["png", "jpg", "jpeg"])

                    if uploaded_image is not None:
                        image = Image.open(uploaded_image)

                        # Redimensionner si trop large
                        width, height = image.size
                        if width > MAX_WIDTH:
                            ratio = MAX_WIDTH / width
                            new_size = (MAX_WIDTH, int(height * ratio))
                            image = image.resize(new_size, Image.Resampling.LANCZOS)

                        st.sidebar.image(image, caption="Capture charg√©e", use_container_width=True)

                        # OCR avec EasyOCR
                        reader = easyocr.Reader(['en', 'fr'])
                        result = reader.readtext(np.array(image), detail=0)  # texte brut
                        lines = [line.strip() for line in result if line.strip()]

                        # st.sidebar.text_area("üìÑ Texte brut OCR", value="\n".join(lines), height=200)

                        # üîé Extraire les blocs Devise + Achat + Vente
                        data = []
                        i = 0
                        while i < len(lines):
                            line = lines[i]

                            # Devise = 3 lettres majuscules
                            if re.match(r"^[A-Z]{3}$", line):
                                devise = line
                                try:
                                    achat = float(lines[i+1].replace(",", "."))
                                    vente = float(lines[i+2].replace(",", "."))
                                    data.append([devise, achat, vente])
                                    i += 3  # avancer de 3 lignes
                                    continue
                                except Exception:
                                    pass
                            i += 1

                        if data:
                            df_rates = pd.DataFrame(data, columns=["Devise", "Achat", "Vente"])
                            st.write("üìä Taux extraits :")
                            st.dataframe(df_rates)

                            # Sauvegarde en session_state
                            st.session_state.df_rates = df_rates

                            # Interface choix devise
                            devise_active = st.sidebar.radio("Choisir la devise :", ["EUR", "USD"], horizontal=True)
                            st.session_state.devise_active = devise_active


                        else:
                            st.warning("‚ö†Ô∏è Aucun taux d√©tect√© dans l'image")
                elif source == "OANDA":
                    if "df_rates" not in st.session_state:
                        st.session_state.df_rates = pd.DataFrame(
                            [["EUR", 1.0, 1.0]],  # Valeur par d√©faut
                            columns=["Devise", "Achat", "Vente"]
                        )
                    st.sidebar.markdown("## üí± Saisie du taux de change (OANDA manuel)")
                    with st.sidebar.form("oanda_manual_form"):
                        base = st.text_input("Devise de base", "USD").upper().strip()
                        target = st.text_input("Devise cible", "DZD").upper().strip()
                        taux = st.number_input(
                            f"Taux (1 {base} = ? {target})",
                            min_value=0.0,
                            format="%.6f"
                        )
                        submit = st.form_submit_button("Enregistrer")
                    devise_active = st.sidebar.radio("Choisir la devise :", ["USD", "EUR"], horizontal=True)
                    st.session_state.devise_active = devise_active
                    if submit:
                        if taux <= 0:
                            st.error("Le taux doit √™tre sup√©rieur √† 0.")
                        else:
                            pair = f"{base}"
                            new_row = {"Devise": pair, "Achat": taux, "Vente": taux}

                            df = st.session_state.df_rates.copy()
                            mask = df["Devise"] == pair
                            if mask.any():
                                df.loc[mask, ["Achat", "Vente"]] = [taux, taux]
                            else:
                                df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)

                            st.session_state.df_rates = df
                            st.sidebar.success(f"Taux {pair} enregistr√© : {taux}")

                # --- Affichage du tableau ---
                # if not st.session_state.df_rates.empty:
                #     st.markdown("### üìä Taux enregistr√©s")
                #     st.dataframe(st.session_state.df_rates.reset_index(drop=True))
                col1, = st.columns(1) 
                with col1:
                    jours_mois = st.number_input("Jours mois", min_value=28.0, max_value=31.0, step=1.0, value=30.0)

                Observation = st.text_input("Observation", value="")

                # 2. Nettoyage des colonnes
                cols_to_float = [
                    "Salaire de base (DZD)", "Prime mensuelle (Bar√®me) (DZD)", "IFSP (20% du salaire de base)",
                    "Prime exeptionnelle (10%) (DZD)", "Frais de remboursement (V√©hicule) (DZD)", 
                    "Indemnit√© de panier (DZD)", "Indemnit√© de transport (DZD)", "Nouveau Salaire de base (DZD)",
                    "Prime vestimentaire (DZD)", "Nouvelle Indemnit√© de panier (DZD)",  "Nouvelle Indemnit√© de transport (DZD)",
                    "Nouvelle Prime mensuelle (DZD)", "Nouveaux Frais de remboursement (V√©hicule) (DZD)","Prime vestimentaire (DZD)", "Ind√©mnit√© V√©hicule (DZD)",
                    "Absence (Jour)","Absence Maladie (Jour)","Absence Maternit√© (Jour)", "Absence Mise √† pied (Jour)", "Jours de cong√© (Jour)",
                    "Heures supp 100% (H)", "Heures supp 75% (H)", "Heures supp 50% (H)", "Jours supp (Jour)","Taux compl√©ment sant√© (DZD)","Frais t√©l√©phone",
                    "Frais de transport (Yassir)","Frais divers","Avance NET (DZD)","Augmentation", "R√©gul", "Co√ªt cong√© pay√©", "Nbr jours STC (jours)",
                    "Jours de cong√© (22 jours)","Indemnit√© non cotisable et imposable 10% (DZD)","Indemnit√© zone", "Total absence (sur 22 jours)",
                    "Nouvelle ind√©mnit√© V√©hicule (DZD)","Nouveau IFSP (20% du salaire de base)","Nbr jours augmentation","Indemnit√© de d√©part (Net)",
                    "Allocation Aid El Adha NET"
                ]
              

                


                for col in cols_to_float:
                    if col in df_client.columns:
                        df_client[col] = nettoyer_colonne(df_client, col)
                    else:
                        df_client[col] = 0.0
                col_pourcentage = ["Fees etalent", "TVA"]

                for col in col_pourcentage:
                    df_client[col] = (
                        df_client[col]
                        .fillna("0")                          
                        .astype(str)
                        .str.replace("%", "", regex=False)
                        .str.replace(",", ".", regex=False)
                        .str.strip()
                        .replace("", "0")
                        .astype(float)
                    )
                
                df_client["NDF"]= df_client["NDF"].fillna(0)                                 
                # df_client["jours conge ouvres"] = df_client.apply(calcul_jours_ouvres, axis=1)
                
                df_client["jours stc ouvres"] = df_client.apply(calcul_joursstc_ouvres, axis=1)
                absences_total = (
                df_client["Absence (Jour)"]
                + df_client["Absence Maladie (Jour)"]
                + df_client["Absence Maternit√© (Jour)"]
                + df_client["Absence Mise √† pied (Jour)"]
                + df_client["Jours de cong√© (Jour)"]  # version brute
            )
                print(df_client["Jours de cong√© (22 jours)"])
                absences_total22 = (
                    df_client["Total absence (sur 22 jours)"]
                    + df_client["Jours de cong√© (22 jours)"]  # version corrig√©e week-end
                )
                absences_totallg = (
                df_client["Absence (Jour)"]
                + df_client["Absence Maladie (Jour)"]
                + df_client["Absence Maternit√© (Jour)"]
                + df_client["Absence Mise √† pied (Jour)"]
                
            ) 
                
                HEURES_MOIS = 173.33
                
                # 3. Calculs (une seule fois)
                df_client["Salaire de base calcule"] = (get_valeur("Salaire de base (DZD)", "Nouveau Salaire de base (DZD)"))
                df_client["Indemnit√© de panier calcule"] = get_valeur("Indemnit√© de panier (DZD)", "Nouvelle Indemnit√© de panier (DZD)")
                df_client["ind√©mnit√© V√©hicule calcule"] = get_valeur("Ind√©mnit√© V√©hicule (DZD)", "Nouvelle ind√©mnit√© V√©hicule (DZD)")
                df_client["Indemnit√© de transport calcule"] = get_valeur("Indemnit√© de transport (DZD)", "Nouvelle Indemnit√© de transport (DZD)")
                df_client["Prime mensuelle calcule"] = get_valeur("Prime mensuelle (DZD)", "Nouvelle Prime mensuelle (DZD)")
                df_client["IFSP (20% du salaire de base) calcule"] = get_valeur("IFSP (20% du salaire de base)", "Nouveau IFSP (20% du salaire de base)")
                df_client["Frais remboursement calcule"] = get_valeur("Frais de remboursement (V√©hicule) (DZD)", "Nouveaux Frais de remboursement (V√©hicule) (DZD)")
                # print(df_client["Salaire de base calcule"])
                df_client["Salaire de base calcule"] = ((df_client["Salaire de base calcule"]/30)*(30-df_client["Nbr jours augmentation"]))+(((df_client["Salaire de base calcule"] * (1 + (df_client["Augmentation"] / 100)))/30 )*df_client["Nbr jours augmentation"])
                # df_client["Salaire de base calcule"] = (df_client["Salaire de base calcule"] * (1 + (df_client["Augmentation"] / 100)))
                df_client["Salaire de base calcule"] += df_client["IFSP (20% du salaire de base) calcule"]
                salaire_journalier = df_client["Salaire de base calcule"] / jours_mois
                df_client["Salaire de base calcule"] = (
                    (df_client["Salaire de base calcule"]
                    - df_client["Salaire de base calcule"] / 30 * absences_total
                    + df_client["Salaire de base calcule"] / HEURES_MOIS * (
                        df_client["Heures supp 100% (H)"] * 2
                        + df_client["Heures supp 75% (H)"] * 1.75
                        + df_client["Heures supp 50% (H)"] * 1.5
                    )
                    + (df_client["Jours supp (Jour)"] * salaire_journalier)) 
                    
                )
                df_client["IFSP (20% du salaire de base)"] = df_client["IFSP (20% du salaire de base) calcule"]
                df_client["Salaire de base calcule"] = df_client["Salaire de base calcule"] - (df_client["Salaire de base calcule"]/jours_mois) * df_client["Nbr jours STC (jours)"]
                # Ajout r√©gul seulement si Base de r√©gul == "Salaire de base"
                df_client["Salaire de base calcule"] += np.where(
                    df_client["Base de r√©gul"] == "Salaire de base", df_client["R√©gul"], 0)

                print(absences_total22)
                if df_client["Etablissement"].iloc[0] == "Coca cola": 
                    df_client["Indemnit√© de panier calcule"] = (
                    df_client["Indemnit√© de panier calcule"]
                    - (df_client["Indemnit√© de panier calcule"] / 26 * absences_total22)
                    + (df_client["Indemnit√© de panier calcule"] / 26 * (
                        (df_client["Heures supp 100% (H)"] ) / 8
                        + (df_client["Heures supp 75% (H)"] ) / 8
                        + (df_client["Heures supp 50% (H)"] ) / 8
                    ))
                 )
                    df_client["Indemnit√© de transport calcule"] = (
                    df_client["Indemnit√© de transport calcule"]
                    - (df_client["Indemnit√© de transport calcule"] / 26 * absences_total22)
                    + (df_client["Indemnit√© de transport calcule"] / 26 * (
                        (df_client["Heures supp 100% (H)"] ) / 8
                        + (df_client["Heures supp 75% (H)"] ) / 8
                        + (df_client["Heures supp 50% (H)"] ) / 8
                    ))
                 )
                    df_client["ind√©mnit√© V√©hicule calcule"] = (
                    df_client["ind√©mnit√© V√©hicule calcule"]
                    - (df_client["ind√©mnit√© V√©hicule calcule"] / 26 * absences_total22)
                    + (df_client["ind√©mnit√© V√©hicule calcule"] / 26 * (
                        (df_client["Heures supp 100% (H)"] ) / 8
                        + (df_client["Heures supp 75% (H)"] ) / 8
                        + (df_client["Heures supp 50% (H)"] ) / 8
                    ))
                 )
                    df_client["Indemnit√©somme"]= df_client["Indemnit√© de panier calcule"] + df_client["Indemnit√© de transport calcule"] + df_client["Prime vestimentaire (DZD)"] + df_client["ind√©mnit√© V√©hicule calcule"]+df_client["Avance NET (DZD)"] 
                    df_client["Indemnit√© 22jours"] = df_client["Indemnit√©somme"]
                    print(df_client["Indemnit√© 22jours"])
                else:
                    df_client["Indemnit√©somme"]= df_client["Indemnit√© de panier calcule"] + df_client["Indemnit√© de transport calcule"] + df_client["Prime vestimentaire (DZD)"] + df_client["ind√©mnit√© V√©hicule calcule"]+df_client["Avance NET (DZD)"] 
                    
                    df_client["Indemnit√© 22jours"] = (
                        df_client["Indemnit√©somme"]
                        - (df_client["Indemnit√©somme"] / 22 * absences_total22)
                        + (df_client["Indemnit√©somme"] / 22 * (
                            (df_client["Heures supp 100% (H)"] * 2) / 8
                            + (df_client["Heures supp 75% (H)"] * 1.75) / 8
                            + (df_client["Heures supp 50% (H)"] * 1.5) / 8
                        ))
                    )
                    print(df_client["Indemnit√© de panier calcule"])
                    print(df_client["Indemnit√© de transport calcule"])
                    print(df_client["Prime vestimentaire (DZD)"])
                    print(df_client["ind√©mnit√© V√©hicule calcule"])
                    print(df_client["Avance NET (DZD)"])
                    print(df_client["Indemnit√©somme"])
                    print(df_client["Indemnit√© 22jours"])
                df_client["Indemnit√© 22jours"]= df_client["Indemnit√© 22jours"] - ((df_client["Indemnit√© 22jours"]/22) * df_client["jours stc ouvres"])
                if df_client["Etablissement"].iloc[0] == "LG":
                    df_client["Indemnit√©somme"]= df_client["Indemnit√© de panier calcule"] + df_client["Indemnit√© de transport calcule"] + df_client["Prime vestimentaire (DZD)"] + df_client["ind√©mnit√© V√©hicule calcule"]+df_client["Avance NET (DZD)"] 
                    
                    df_client["Indemnit√© 22jours"] = (
                        df_client["Indemnit√©somme"]
                        - (df_client["Indemnit√©somme"] / 30 * df_client["Total absence (sur 22 jours)"])
                        
                    )
                    df_client["Salaire de base calcule"] = (
                        df_client["Salaire de base (DZD)"]
                        + (df_client["Salaire de base (DZD)"] / HEURES_MOIS * (
                        + df_client["Heures supp 100% (H)"] * 2
                        + df_client["Heures supp 75% (H)"] * 1.75
                        + df_client["Heures supp 50% (H)"] * 1.5))
                        - df_client["Salaire de base (DZD)"] / 30 * absences_totallg 
                    )
                    df_client["Salaire de base calcule"] = df_client["Salaire de base calcule"] + df_client["Prime mensuelle (Bar√®me) (DZD)"] 
                    df_client["Base cotisable"] = df_client["Salaire de base calcule"] + df_client["Prime exeptionnelle (10%) (DZD)"]  + df_client["Indemnit√© non cotisable et imposable 10% (DZD)"]
                else:
                    df_client["Base cotisable"] = (
                            
                         df_client["Salaire de base calcule"] + df_client["Prime mensuelle (Bar√®me) (DZD)"] 
                        )
                df_client["ind√©mnit√© V√©hicule"] = df_client["ind√©mnit√© V√©hicule calcule"]
                if df_client["Etablissement"].iloc[0] == "LG" :
                    df_client["Base imposable 10%"] = df_client["Indemnit√© non cotisable et imposable 10% (DZD)"] * 0.91 + df_client["Allocation Aid El Adha NET"]
                else:
                    df_client["Base imposable 10%"] = df_client["Indemnit√© non cotisable et imposable 10% (DZD)"] * 0.91

                df_client["Retenue CNAS employ√©"] = df_client["Base cotisable"] * 0.09
                if df_client["Etablissement"].iloc[0] == "Henkel": 
                    
                    df_client["Base imposable au bar√©me"]  = ((((df_client["Salaire de base calcule"]+ df_client["Prime mensuelle (Bar√®me) (DZD)"])-((df_client["Salaire de base calcule"]+ df_client["Prime mensuelle (Bar√®me) (DZD)"])*0.09))+df_client["Indemnit√© 22jours"])/10)*10
                elif   df_client["Etablissement"].iloc[0] == "LG":
                        df_client["Base imposable au bar√©me"] = np.floor(((((df_client["Salaire de base calcule"] +df_client["Prime exeptionnelle (10%) (DZD)"] ) * 0.91)+ df_client["Indemnit√© 22jours"]))/ 10) * 10
                elif df_client["Etablissement"].iloc[0] == "G+D":
                    df_client["Base imposable au bar√©me"] = np.floor((((df_client["Salaire de base calcule"] + df_client["Indemnit√© non cotisable et imposable 10% (DZD)"]) -df_client["Indemnit√© non cotisable et imposable 10% (DZD)"]) * 0.91 + df_client["Indemnit√© 22jours"])/10)*10
                else:
                    df_client["Base imposable au bar√©me"] = np.floor((((df_client["Base cotisable"] - df_client["Prime exeptionnelle (10%) (DZD)"]- df_client["Indemnit√© non cotisable et imposable 10% (DZD)"]- df_client["Indemnit√© zone"]) * 0.91+ (df_client["Indemnit√© 22jours"])))/ 10) * 10
                    
                def irg_bareme(base):
                    b = np.ceil(base / 10) * 10  # PLAFOND(...;10) en Excel
                    
                    if b < 30000:
                        return 0
                    elif 30000 <= b <= 30860:
                        return (((( (b - 20000) * 0.23) - 1000) * 137/51) - (27925/8))
                    elif 30860 < b < 35000:
                        return (((( (b - 20000) * 0.23) * 0.60) * 137/51) - (27925/8))
                    elif 35000 <= b < 36310:
                        return (b - 20000) * 0.23 * 0.60
                    elif 36310 <= b < 40000:
                        return (b - 20000) * 0.23 - 1500
                    elif 40000 <= b < 80000:
                        return (b - 40000) * 0.27 + 3100
                    elif 80000 <= b < 160000:
                        return (b - 80000) * 0.30 + 13900
                    elif 160000 <= b < 320000:
                        return (b - 160000) * 0.33 + 37900
                    else:  # b >= 320000
                        return (b - 320000) * 0.35 + 90700

                df_client["IRG bar√®me"] = df_client["Base imposable au bar√©me"].apply(irg_bareme)
                df_client["IRG 10%"] = df_client["Base imposable 10%"] * 0.10
                if df_client["Etablissement"].iloc[0] == "LG":
                    df_client["Salaire brut"] = (
                        (df_client["Salaire de base calcule"] +
                        df_client["Indemnit√© 22jours"]+
                        df_client["Indemnit√© non cotisable et imposable 10% (DZD)"]) 
                    )
                    df_client["Salaire brut"] += np.where(
                    df_client["Base de r√©gul"] == "Salaire Brut", df_client["R√©gul"], 0)
                    df_client["Salaire net"] = ((df_client["Salaire de base calcule"]*0.91)+df_client["Indemnit√© 22jours"])+df_client["Base imposable 10%"]-df_client["IRG bar√®me"]-df_client["IRG 10%"]
                    df_client["Salaire net"] += np.where(
                    df_client["Base de r√©gul"] == "Salaire Net", df_client["R√©gul"], 0).round(0)
               
                else : 
                    df_client["Salaire brut"] = (
                        (df_client["Base cotisable"] +
                        (df_client["Indemnit√© 22jours"])+
                        df_client["Frais remboursement calcule"]) 
                    )
                    df_client["Salaire brut"] += np.where(
                    df_client["Base de r√©gul"] == "Salaire Brut", df_client["R√©gul"], 0)
                    df_client["Salaire net"] = (
                        (df_client["Salaire brut"] -
                        df_client["Retenue CNAS employ√©"] -
                        df_client["IRG bar√®me"] -
                        df_client["IRG 10%"]) 
                    )
                    df_client["Salaire net"] += np.where(
                    df_client["Base de r√©gul"] == "Salaire Net", df_client["R√©gul"], 0).round(0)
                df_client["CNAS employeur"] = df_client["Base cotisable"] * 0.26
                df_client["Indemnit√©s Non Cotisable - Mensuelle | Panier, Transport"] = df_client["Indemnit√© 22jours"]
                if  df_client["Etablissement"].iloc[0] == "Henkel":
                    df_client["Taxe formation et os"] = (df_client["Salaire de base calcule"] + df_client["Prime mensuelle (Bar√®me) (DZD)"]+ df_client["Indemnit√© de panier calcule"] + df_client["Indemnit√© de transport calcule"] +df_client["Prime vestimentaire (DZD)"]) * 0.04
                    df_client["Cotisation ≈ìuvre sociale"] = 0
                    df_client["Taxe formation"] = 0
                elif df_client["Etablissement"].iloc[0] == "Maersk" :
                    df_client["Taxe formation et os"] = (df_client["Base cotisable"]) * 0.03
                    df_client["Cotisation ≈ìuvre sociale"] = 0
                    df_client["Taxe formation"] = 0
                else:
                    df_client["Cotisation ≈ìuvre sociale"] = df_client["Salaire brut"] * 0.02
                    df_client["Taxe formation"] = df_client["Salaire brut"] * 0.02
                    df_client["Taxe formation et os"] = 0
                    df_client["Masse salariale"] = (
                    df_client["Salaire brut"] +
                    df_client["CNAS employeur"] +
                    df_client["Cotisation ≈ìuvre sociale"] +
                    df_client["Taxe formation"]
                )
                df_client["Prime mensuelle"] = df_client["Prime mensuelle calcule"]
                if df_client["Etablissement"].iloc[0] == "Henkel":
                    df_client["Co√ªt salaire"] = (
                        (df_client["Salaire net"]
                        + df_client["Taxe formation et os"]
                        + df_client["CNAS employeur"]
                        + df_client["IRG 10%"]
                        + df_client["IRG bar√®me"]
                        + df_client["Retenue CNAS employ√©"]
                        + df_client["Frais t√©l√©phone"])
                    )
                    df_client["Co√ªt salaire"] += np.where(
                    df_client["Base de r√©gul"] == "Cout salaire", df_client["R√©gul"], 0)
                    df_client["Co√ªt cong√© pay√©"] = df_client.apply(calcul_cout_conge, axis=1)
                    fees_multiplicateur = 1 + (df_client["Fees etalent"] / 100)
                    
                    
                    if df_client["TAP"].iloc[0] == "Oui" :
                        df_client["TAP (DZD)"] = (df_client["Co√ªt salaire"]+ df_client["Co√ªt cong√© pay√©"] + df_client["Taux compl√©ment sant√© (DZD)"])*0.03
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] + df_client["Co√ªt cong√© pay√©"]+ df_client["TAP (DZD)"] + df_client["Taux compl√©ment sant√© (DZD)"]) * fees_multiplicateur)
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate

                    else : 
                        df_client["TAP (DZD)"] = 0.0
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] + df_client["Co√ªt cong√© pay√©"]+ df_client["TAP (DZD)"])* fees_multiplicateur)
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                      
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate

                elif df_client["Etablissement"].iloc[0] == "LG":
                    df_client["Co√ªt salaire"] = (
                        (df_client["Salaire net"]
                        + df_client["Cotisation ≈ìuvre sociale"]
                        + df_client["Taxe formation"]
                        + df_client["CNAS employeur"]
                        + df_client["IRG 10%"]
                        + df_client["IRG bar√®me"]
                        + df_client["Retenue CNAS employ√©"]
                        + df_client["Frais t√©l√©phone"]) 
                    )
                    df_client["Co√ªt salaire"] += np.where(
                    df_client["Base de r√©gul"] == "Cout salaire", df_client["R√©gul"], 0)
                    df_client["Co√ªt cong√© pay√©"] = df_client.apply(calcul_cout_conge, axis=1)
                    fees_multiplicateur = 1 + (df_client["Fees etalent"] / 100)
                    if df_client["TAP"].iloc[0] == "Oui" :
                        df_client["TAP (DZD)"] = (df_client["Co√ªt salaire"] + ( df_client["Co√ªt salaire"] * df_client["Fees etalent"])) * 0.02
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] * fees_multiplicateur) + df_client["TAP (DZD)"])+ df_client["Taux compl√©ment sant√© (DZD)"] 
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate
                    else : 
                        df_client["TAP (DZD)"] = 0.0
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] * fees_multiplicateur))+ df_client["Taux compl√©ment sant√© (DZD)"] 
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate

                elif df_client["Etablissement"].iloc[0] == "Maersk":
                    df_client["Co√ªt salaire"] = (
                        (df_client["Salaire net"]
                        + df_client["Taxe formation et os"]
                        + df_client["CNAS employeur"]
                        + df_client["IRG 10%"]
                        + df_client["IRG bar√®me"]
                        + df_client["Retenue CNAS employ√©"])
                    )
                    df_client["Co√ªt salaire"] += np.where(
                    df_client["Base de r√©gul"] == "Cout salaire", df_client["R√©gul"], 0)
                    df_client["Co√ªt cong√© pay√©"] = df_client.apply(calcul_cout_conge, axis=1)
                    fees_multiplicateur = 1 + (df_client["Fees etalent"] / 100)
                    if df_client["TAP"].iloc[0] == "Oui" :
                        df_client["TAP (DZD)"] = (df_client["Co√ªt salaire"] + ( df_client["Co√ªt salaire"] * df_client["Fees etalent"])) * 0.02
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] + df_client["Co√ªt cong√© pay√©"]+ df_client["TAP (DZD)"])* fees_multiplicateur)
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate

                    else : 
                        df_client["TAP (DZD)"] = 0.0
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] + df_client["Co√ªt cong√© pay√©"]+ df_client["TAP (DZD)"])* fees_multiplicateur)
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate
                        
                elif df_client["Etablissement"].iloc[0] == "G+D":
                    df_client["Co√ªt salaire"] = (df_client["Salaire de base calcule"] + df_client["Indemnit√© de panier calcule"] + df_client["Indemnit√© de transport calcule"] +df_client["Prime vestimentaire (DZD)"]+df_client["Frais remboursement calcule"]+df_client["Prime exeptionnelle (10%) (DZD)"]) 
                    df_client["Co√ªt salaire"] += np.where(
                    df_client["Base de r√©gul"] == "Cout salaire", df_client["R√©gul"], 0)
                    fees_multiplicateur = 1 + (df_client["Fees etalent"] / 100)
                    if df_client["TAP"].iloc[0] == "Oui" :
                        df_client["TAP (DZD)"] = (df_client["Co√ªt salaire"] + ( df_client["Co√ªt salaire"] * df_client["Fees etalent"])) * 0.02
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] * fees_multiplicateur) + df_client["TAP (DZD)"])
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate

                    else : 
                        df_client["TAP (DZD)"] = 0.0
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] * fees_multiplicateur))
                        df_client["Facture HT + NDF"] = df_client["Facture HT"]+df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate

                else:
                    df_client["Co√ªt cong√© pay√©"] = df_client.apply(calcul_cout_conge, axis=1)
                    fees_multiplicateur = 1 + (df_client["Fees etalent"] / 100)
                    df_client["Co√ªt salaire"] = (
                        (df_client["Masse salariale"]
                        + df_client["Co√ªt cong√© pay√©"]
                        + df_client["Taux compl√©ment sant√© (DZD)"]
                        + df_client["Frais divers"]
                        + df_client["Frais de transport (Yassir)"]
                        + df_client["Frais t√©l√©phone"]) 
                    )
                    df_client["Co√ªt salaire"] += np.where(
                    df_client["Base de r√©gul"] == "Cout salaire", df_client["R√©gul"], 0)
                    fees_multiplicateur = 1 + (df_client["Fees etalent"] / 100)
                    if df_client["TAP"].iloc[0] == "Oui" :
                        df_client["TAP (DZD)"] = (df_client["Co√ªt salaire"] + ( df_client["Co√ªt salaire"] * (df_client["Fees etalent"]/100))) * 0.02
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] * fees_multiplicateur) + df_client["TAP (DZD)"])
                        df_client["Facture HT + NDF"] = df_client["Facture HT"] + df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate

                    else : 
                        df_client["TAP (DZD)"] = 0.0
                        df_client["Facture HT"] = ((df_client["Co√ªt salaire"] * fees_multiplicateur))
                        df_client["Facture HT + NDF"] = df_client["Facture HT"] + df_client["NDF"]
                        df_client["Facture HT + NDF"] = pd.to_numeric(df_client["Facture HT + NDF"], errors="coerce").fillna(0)
                        
                        if "df_rates" in st.session_state and not st.session_state.df_rates.empty:
                            df_rates = st.session_state.df_rates

                            # R√©cup√©rer les taux
                            euro_row = st.session_state.df_rates.loc[
                                st.session_state.df_rates["Devise"].str.contains("EUR"), "Achat"
                            ]

                            if not euro_row.empty:
                                euro_rate = euro_row.values[0]
                            else:
                                st.sidebar.warning("‚ö†Ô∏è Aucun taux EUR trouv√© dans df_rates")
                                euro_rate = None

                            usd_rate  = df_rates.loc[df_rates["Devise"] == "USD", "Achat"].values[0]

                            # Choisir le bon taux en fonction de la s√©lection utilisateur
                            rate = euro_rate if st.session_state.devise_active == "EUR" else usd_rate
                            df_client["Facture HT en devise"] = df_client["Facture HT + NDF"] / rate
                df_client["Frais remboursement"] = df_client["Frais remboursement calcule"]
                df_client["Salaire de base"] = df_client["Salaire de base calcule"]
                df_client["Indemnit√© de panier"] = df_client["Indemnit√© de panier calcule"]
                df_client["Indemnit√© de transport"] = df_client["Indemnit√© de transport calcule"]
                tva_multiplicateur = 1+ (df_client["TVA"]/100)
                # Calcul TVA et TTC
                df_client["Facture TVA"] = df_client["Facture HT + NDF"] * (df_client["TVA"] / 100)
                df_client["Facture TTC"] = df_client["Facture HT + NDF"] + df_client["Facture TVA"]
                df_client["Observation"] = Observation
                # st.write("Mois distincts trouv√©s :", df_client["Mois"].unique())

                st.write(df_client.head(50)) # On peut encapsuler ton code de calculs dans une fonction
                
                # 1. On d√©finit les colonnes fixes (identit√© employ√©)
                # Colonnes fixes (identit√© employ√©)
                mois_ordre = [
                    "Janvier", "F√©vrier", "Mars", "Avril", "Mai", "Juin",
                    "Juillet", "Ao√ªt", "Septembre", "Octobre", "Novembre", "D√©cembre"
                ]


                id_cols = ["Nom", "Pr√©nom", "N¬∞", "Titre du poste", "Dur√©e du CDD (Mois)", "Etablissement", "Ann√©e"]

                # Colonnes variables (toutes sauf identit√©s + Mois)
                val_cols = [c for c in df_client.columns if c not in id_cols + ["Mois"]]

                # Pivot
                df_pivot = df_client.pivot_table(
                    index=id_cols,
                    columns="Mois",
                    values=val_cols,
                    aggfunc="first"   # tu peux mettre "max" ou "sum" selon ton besoin
                )

                # Aplatir
                df_pivot.columns = [f"{val}_{mois}" for val, mois in df_pivot.columns]
                df_pivot = df_pivot.reset_index()

                # R√©ordonner
                colonnes_identite = id_cols
                colonnes_mois = []

                for mois in mois_ordre:
                    colonnes_mois.extend([c for c in df_pivot.columns if c.endswith(f"_{mois}")])

                # ‚úÖ R√©appliquer l‚Äôordre
                df_pivot = df_pivot[colonnes_identite + colonnes_mois]
         



               
                # üì• G√©n√©ration et t√©l√©chargement Excel
                # --------------------------------------
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                    df_client.to_excel(writer, index=False, sheet_name='Calculs')
                    workbook = writer.book
                    worksheet = writer.sheets['Calculs']

                    # Style ent√™te
                    header_format = workbook.add_format({
                        'bold': True, 'text_wrap': True, 'valign': 'middle',
                        'align': 'center', 'fg_color': '#0a5275',
                        'font_color': 'white', 'border': 1
                    })
                    for col_num, value in enumerate(df_client.columns.values):
                        worksheet.write(0, col_num, value, header_format)

                    # Ajuster largeur colonnes
                    for i, col in enumerate(df_client.columns):
                        col_width = max(df_client[col].astype(str).map(len).max(), len(col)) + 2
                        worksheet.set_column(i, i, col_width)

                st.download_button(
                    label="üìä T√©l√©charger les r√©sultats en Excel",
                    data=output.getvalue(),
                    file_name=f"{st.session_state.selected_client}_calculs.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

               
                # üì• G√©n√©ration et t√©l√©chargement PDF par employ√©
                # ------------------------------------------------
                st.markdown("### üì• T√©l√©charger la facture PDF par employ√©")
                for idx, row in df_pivot.iterrows():
                    nom = str(row.get("Nom", f"employe_{idx}")).strip().replace(" ", "_")
                    matricule = str(row.get("Matricule", f"id_{idx}")).strip()

                    employe_data = row.to_dict()

                    # G√©n√©rer UN SEUL fichier consolid√© avec tous les mois
                    # 1) G√©n√©rer le fichier Excel en local
                    fichier_excel = generer_facture_excel(employe_data, f"{matricule}_{nom}_facture.xlsx")

                    # 2) Lecture pour Streamlit
                    with open(fichier_excel, "rb") as f:
                        excel_data = f.read()

                    st.download_button(
                        label=f"üìä {nom}",
                        data=excel_data,
                        file_name=f"{nom}_facture.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        key=f"excel_{matricule}_{idx}"
                    )

                    # 3) Upload vers Drive
                    drive_file_id = upload_to_drive(fichier_excel, client_name=row["Etablissement"] if pd.notna(row["Etablissement"]) else "Inconnu", root_folder_id="1vhxSZ3jtWEqLocQ7yx9AcsSCiVowbFve")
                    print("üìÇ Fichier envoy√© sur Drive :", drive_file_id)

                    # 4) Supprimer la copie locale si tu veux
                    import os
                    if os.path.exists(fichier_excel):
                        os.remove(fichier_excel)



            else:
                st.warning("‚ö†Ô∏è Aucun employ√© trouv√© pour ce client ")
        else:
            st.info("Veuillez d'abord t√©l√©verser le fichier r√©capitulatif global dans la barre lat√©rale.")



















